#dispersion plot
plotDispEsts(dds)

#PCA plot
#variance stabilizing transformation
vds <- vst(dds, blind = FALSE)

#use transformed values to generate PCA plot
plotPCA(vds,intgroup=c("Sequencing", "Treatment"))

#Heatmaps
#R package: pheatmap

#Heatmap of sample-to-sample distance matrix (with clustering) based on the normalized counts.
#1. Generate distant matrix
sampledis <- dist(t(assay(vds)))
sampledismat <- as.matrix(sampledis)

#2. set color scheme
color <- colorRampPalette(rev(brewer.pal(9, "Reds")))(300)

#3.Generate heatmap
pheatmap(sampledismat, clustering_distance_rows = sampledis,
         clustering_distance_cols = sampledis, col=color)


#Heatmap of log transformed normalized counts. We will use the top 10 genes.
#1. ordering the top 10 genes
top10 <- res[order(res$padj),][1:10,]
top10 <- row.names(top10)
top10  

#2. performing log transformation
rld <- rlog(dds,blind = FALSE)

#3. Generate the heatmap
pheatmap(assay(rld)[top10,], cluster_rows = FALSE, show_rownames = TRUE,
         cluster_cols = FALSE)
pheatmap(assay(rld)[top10,], )

#4. adding annotation (optional)
annot <- as.data.frame(colData(dds)[,c('Sequencing', 'Treatment')])
pheatmap(assay(rld)[top10,], cluster_rows = FALSE, show_rownames = TRUE,
         cluster_cols = FALSE, annotation_col = annot)


#Heatmap of Z scores. We will use the top 10 genes
#1. calculate z score
cal_z_score <- function(x) {(x-mean(x)) / sd (x)}
allzscore <- t(apply(normalized, 1, cal_z_score))
# 2. subset top 10 genes
subset_zscore <- allzscore[top10,]
# 3. Generating heatmap
pheatmap(subset_zscore)

#MA plot
plotMA(dds, ylim=c(-2,2))
# removing nose MA plot
resLFC <- lfcShrink(dds, coef = "Treatment_treated_vs_untreated", type="apeglm")
plotMA(resLFC, ylim=c(-2,2))
#change resLFC to dataframe
resLFC <- as.data.frame(resLFC)

#volcano plot
#labelling the genes
resLFC$diffexpressed <- "NO"
resLFC$diffexpressed[resLFC$log2FoldChange>0.1 & resLFC$padj<0.05] <- "UP"
resLFC$diffexpressed[resLFC$log2FoldChange<0.1 & resLFC$padj<0.05] <- "DOWN"
resLFC$delabel <- NA

ggplot(data=resLFC,aes(x=log2FoldChange,y =- log10(pvalue),col=diffexpressed,label=delabel))+
  geom_point()+
  theme_minimal()+
  geom_text_repel()+
  scale_color_manual(values=c('violet','blue','red'))+
  theme(text=element_text(size=20))
